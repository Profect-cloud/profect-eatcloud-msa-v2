plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.eatcloud'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:2025.0.0"
	}
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	
	// Spring Retry for REST API retry logic
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework:spring-aspects'

	runtimeOnly 'org.postgresql:postgresql'

	// Redis dependencies - Redisson으로 변경
	// implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	// implementation 'org.apache.commons:commons-pool2' // Lettuce connection pool support

	// Redisson 추가 (분산락 및 분산 트랜잭션 지원)
	implementation 'org.redisson:redisson-spring-boot-starter:3.24.3'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// 공통 모듈 의존성 추가
	implementation project(':auto-time')
	implementation project(':auto-response')

	// Test Dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux' // MockWebServer용
	testImplementation 'com.h2database:h2' // 인메모리 DB 테스트용
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'io.micrometer:micrometer-registry-prometheus'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'

	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Ensure parameter names are available to Spring
tasks.withType(JavaCompile).configureEach {
	options.compilerArgs += ['-parameters']
}