server.port=8086
spring.application.name=order-service

spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

spring.sql.init.mode=never

spring.main.allow-circular-references=true

spring.datasource.url=jdbc:postgresql://${ORDER_DB_HOST}:${DB_PORT}/${ORDER_DB_NAME:order_db}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

#management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always

feign.circuitbreaker.enabled=true

spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.timeout=${REDIS_TIMEOUT:2000}ms
spring.data.redis.database=${REDIS_DATABASE:0}
spring.data.redis.lettuce.pool.enabled=true
spring.data.redis.lettuce.pool.max-active=${REDIS_POOL_MAX_ACTIVE:8}
spring.data.redis.lettuce.pool.max-idle=${REDIS_POOL_MAX_IDLE:8}
spring.data.redis.lettuce.pool.min-idle=${REDIS_POOL_MIN_IDLE:0}
spring.data.redis.lettuce.pool.max-wait=-1ms
spring.data.redis.lettuce.shutdown-timeout=100ms

distributed.lock.timeout=5
distributed.lock.retry.count=3
distributed.lock.retry.delay=100

spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.group-id=order-service
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*


logging.level.com.eatcloud.orderservice=DEBUG

spring.kafka.consumer.properties.spring.json.use.type.headers=false

# Swagger/OpenAPI Configuration
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
server.forward-headers-strategy=framework

# Logging Configuration
logging.level.com.eatcloud.logging=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{requestId:-}] [%X{userId:-}] %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{requestId:-}] [%X{userId:-}] %logger{36} - %msg%n

# Logback 파일 경로
logging.file.path=./logs
logging.file.name=./logs/order-service.log

# Management endpoints
management.endpoints.web.exposure.include=health,info,metrics,loggers
management.endpoint.loggers.enabled=true

outbox.publisher.fixed-delay-ms=1000
outbox.publisher.batch-size=50
outbox.mapping.OrderCreatedEvent=order.created
outbox.mapping.OrderCancelledEvent=order.cancelled
outbox.mapping.PointDeductionRequestEvent=point.deduction.request

alert.dlt.enabled=true
alert.discord.enabled=true
alert.discord.webhook-url=https://discord.com/api/webhooks/1416396186520256604/VM_6wRKcJHbGW1cJgPnY1CvP4cigNX5haXCz0GjdjTOE9DwHImhy2owNdEEvLcpwMWRY

# DLT test endpoint
dlt.test.enabled=false
dlt.test.force-fail=false