# Complete Vector Setup for Kinesis → Loki Pipeline
# Account: 536580887516, Region: ap-northeast-2, EKS: eatcloud

---
# ServiceAccount with IRSA
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vector
  namespace: monitoring
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::536580887516:role/VectorKinesisRole

---
# Vector Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-config
  namespace: monitoring
data:
  vector.toml: |
    # Vector Configuration for Kinesis → Loki
    
    # Kinesis Source for Stateless Logs
    [sources.kinesis_stateless]
    type = "aws_kinesis_streams"
    region = "ap-northeast-2"
    stream_name = "eatcloud-stateless-logs"
    shard_checkpoint_positions = {}
    
    # Kinesis Source for Stateful Logs  
    [sources.kinesis_stateful]
    type = "aws_kinesis_streams"
    region = "ap-northeast-2"
    stream_name = "eatcloud-stateful-logs"
    shard_checkpoint_positions = {}
    
    # Parse JSON logs and add log type
    [transforms.parse_and_label_stateless]
    type = "remap"
    inputs = ["kinesis_stateless"]
    source = '''
    if exists(.message) {
      parsed = parse_json(.message) ?? {}
      . = merge(., parsed)
    }
    .log_type = "stateless"
    .stream_name = "eatcloud-stateless-logs"
    '''
    
    [transforms.parse_and_label_stateful]
    type = "remap"
    inputs = ["kinesis_stateful"]
    source = '''
    if exists(.message) {
      parsed = parse_json(.message) ?? {}
      . = merge(., parsed)
    }
    .log_type = "stateful"
    .stream_name = "eatcloud-stateful-logs"
    '''
    
    # Extract common labels for both log types
    [transforms.extract_labels]
    type = "remap"
    inputs = ["parse_and_label_stateless", "parse_and_label_stateful"]
    source = '''
    .service = .serviceName || .service || "unknown"
    .level = downcase(.level || "info")
    .namespace = .kubernetes.namespace_name || "default"
    .pod = .kubernetes.pod_name || "unknown"
    .container = .kubernetes.container_name || "unknown"
    .node = .kubernetes.host || "unknown"
    
    # Clean up timestamp
    if exists(.@timestamp) {
      .timestamp = parse_timestamp(.@timestamp, "%Y-%m-%dT%H:%M:%S%.3f%z") ?? now()
    } else if exists(.timestamp) {
      .timestamp = parse_timestamp(.timestamp, "%Y-%m-%dT%H:%M:%S%.3f%z") ?? now()
    } else {
      .timestamp = now()
    }
    '''
    
    # Loki Sink
    [sinks.loki]
    type = "loki"
    inputs = ["normalize_logs"]
    endpoint = "http://loki:3100"
    
    # Required encoding field
    encoding.codec = "json"
    
    # Loki labels - optimized for EatCloud logs
    labels.service = "{{ service }}"
    labels.level = "{{ log_level }}"
    labels.log_type = "{{ log_type }}"
    labels.cluster = "{{ cluster }}"
    
    # Compression and batching
    compression = "gzip"
    
    [sinks.loki.batch]
    max_bytes = 1048576  # 1MB
    timeout_secs = 1
    
    # Health check endpoint
    [api]
    enabled = true
    address = "0.0.0.0:8686"

---
# Vector Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vector
  namespace: monitoring
  labels:
    app: vector
    component: log-processor
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vector
  template:
    metadata:
      labels:
        app: vector
        component: log-processor
    spec:
      serviceAccountName: vector
      containers:
        - name: vector
          image: timberio/vector:0.34.0-alpine
          args:
            - --config-dir
            - /etc/vector/
          ports:
            - name: api
              containerPort: 8686
              protocol: TCP
          resources:
            requests:
              memory: 256Mi
              cpu: 200m
            limits:
              memory: 1Gi
              cpu: 1000m
          volumeMounts:
            - name: config
              mountPath: /etc/vector
              readOnly: true
          env:
            - name: VECTOR_LOG
              value: "info"
            - name: AWS_REGION
              value: "ap-northeast-2"
          livenessProbe:
            httpGet:
              path: /health
              port: 8686
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /health
              port: 8686
            initialDelaySeconds: 10
            periodSeconds: 5
      volumes:
        - name: config
          configMap:
            name: vector-config

---
# Vector Service
apiVersion: v1
kind: Service
metadata:
  name: vector
  namespace: monitoring
  labels:
    app: vector
spec:
  selector:
    app: vector
  ports:
    - name: api
      port: 8686
      targetPort: 8686
  type: ClusterIP