version: "3.8"

x-common-config: &common-config
  user: "1000:1000"
  read_only: true
  tmpfs:
    - /tmp
  restart: unless-stopped
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  networks:
    - eatcloud-network

x-service-config: &service-config
  <<: *common-config
  deploy:
    resources:
      limits:
        cpus: "0.75"
        memory: 768M

services:
  db-init:
    image: alpine:latest
    container_name: db-init
    volumes:
      - ../../database-init:/output
      - ../../auth-service/src/main/resources/db:/input/auth:ro
      - ../../customer-service/src/main/resources/db:/input/customer:ro
      - ../../admin-service/src/main/resources/db:/input/admin:ro
      - ../../manager-service/src/main/resources/db:/input/manager:ro
      - ../../store-service/src/main/resources/db:/input/store:ro
      - ../../order-service/src/main/resources/db:/input/order:ro
      - ../../payment-service/src/main/resources/db:/input/payment:ro
    command: >
      sh -c '
        echo "Creating database initialization scripts...";
        mkdir -p /output;
      
        echo "-- 각 서비스별 데이터베이스 생성" > /output/01-init-databases.sql;
        echo "CREATE DATABASE auth_db;" >> /output/01-init-databases.sql;
        echo "CREATE DATABASE customer_db;" >> /output/01-init-databases.sql;
        echo "CREATE DATABASE admin_db;" >> /output/01-init-databases.sql;
        echo "CREATE DATABASE manager_db;" >> /output/01-init-databases.sql;
        echo "CREATE DATABASE store_db;" >> /output/01-init-databases.sql;
        echo "CREATE DATABASE order_db;" >> /output/01-init-databases.sql;
        echo "CREATE DATABASE payment_db;" >> /output/01-init-databases.sql;
      
        echo "✓ Created database creation script";
      
        counter=2;
        for service in auth customer admin manager store order payment; do
          if [ -f "/input/$$service/schema.sql" ]; then
            num=$$(printf "%02d" $$counter);
            output_file="/output/$$num-$$service-schema.sql";
            echo "\\c $${service}_db;" > "$$output_file";
            echo "" >> "$$output_file";
            cat "/input/$$service/schema.sql" >> "$$output_file";
            echo "" >> "$$output_file";
            echo "✓ Created $$num-$$service-schema.sql";
          else
            echo "⚠ Warning: /input/$$service/schema.sql not found";
          fi;
          counter=$$((counter + 1));
        done;
      
        counter=10;
        for service in auth customer admin manager store order payment; do
          if [ -f "/input/$$service/data.sql" ]; then
            num=$$(printf "%02d" $$counter);
            output_file="/output/$$num-$$service-data.sql";
            echo "\\c $${service}_db;" > "$$output_file";
            echo "" >> "$$output_file";
            cat "/input/$$service/data.sql" >> "$$output_file";
            echo "" >> "$$output_file";
            echo "✓ Created $$num-$$service-data.sql";
          fi;
          counter=$$((counter + 1));
        done;
      
        echo "🎉 Database initialization scripts created successfully!";
        echo "📁 Generated files:";
        ls -la /output/;
      '
    networks:
      - eatcloud-network

  eureka-server:
    <<: *common-config
    build:
      context: ../../
      dockerfile: eureka-server/Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8761/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: 512M

  api-gateway:
    <<: *common-config
    build:
      context: ../../
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "${GATEWAY_PORT:-8080}:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka
      JWT_SECRET: bL3eq0LvdqK92dOj+6cTVtzcEHTPf9+Utw7R+3T01lbXWvksn6FezIjaNVQgEGkD
    depends_on:
      eureka-server:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 512M

  redis:
    image: redis:7.4-alpine
    container_name: eatcloud-redis
    volumes:
      - redis-data:/data
    networks:
      - eatcloud-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 256M

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    networks:
      - eatcloud-network
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8088:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - kafka
    networks:
      - eatcloud-network
    restart: unless-stopped

  eatcloud-db:
    image: postgis/postgis:17-3.4
    container_name: eatcloud-db
    depends_on:
      - db-init
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${DB_NAME:-eatcloud_db}
      POSTGRES_USER: ${DB_USERNAMENAME:-eatcloud_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devpassword123}
    volumes:
      - eatcloud_db_data:/var/lib/postgresql/data
      - ../../database-init:/docker-entrypoint-initdb.d:ro
    networks:
      - eatcloud-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-eatcloud_user} -d ${DB_NAME:-eatcloud_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 1024M

  auth-service:
    <<: *service-config
    build:
      context: ../../
      dockerfile: auth-service/Dockerfile
    container_name: auth-service
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DB_HOST: eatcloud-db
      DB_PORT: 5432
      DB_NAME: auth_db
      DB_USERNAME: ${DB_USERNAME:-eatcloud_user}
      DB_PASSWORD: ${DB_PASSWORD:-devpassword123}
      REDIS_HOST: redis
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka
      JWT_SECRET: bL3eq0LvdqK92dOj+6cTVtzcEHTPf9+Utw7R+3T01lbXWvksn6FezIjaNVQgEGkD
    depends_on:
      eatcloud-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

  customer-service:
    <<: *service-config
    build:
      context: ../../
      dockerfile: customer-service/Dockerfile
    container_name: customer-service
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DB_HOST: eatcloud-db
      DB_PORT: 5432
      DB_NAME: customer_db
      DB_USERNAME: ${DB_USERNAME:-eatcloud_user}
      DB_PASSWORD: ${DB_PASSWORD:-devpassword123}
      REDIS_HOST: redis
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      eatcloud-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_started

  admin-service:
    <<: *service-config
    build:
      context: ../../
      dockerfile: admin-service/Dockerfile
    container_name: admin-service
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DB_HOST: eatcloud-db
      DB_PORT: 5432
      DB_NAME: admin_db
      DB_USERNAME: ${DB_USERNAME:-eatcloud_user}
      DB_PASSWORD: ${DB_PASSWORD:-devpassword123}
      REDIS_HOST: redis
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      eatcloud-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

  manager-service:
    <<: *service-config
    build:
      context: ../../
      dockerfile: manager-service/Dockerfile
    container_name: manager-service
    ports:
      - "8084:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DB_HOST: eatcloud-db
      DB_PORT: 5432
      DB_NAME: manager_db
      DB_USERNAME: ${DB_USERNAME:-eatcloud_user}
      DB_PASSWORD: ${DB_PASSWORD:-devpassword123}
      REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      eatcloud-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

  store-service:
    <<: *service-config
    build:
      context: ../../
      dockerfile: store-service/Dockerfile
    container_name: store-service
    ports:
      - "8085:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DB_HOST: eatcloud-db
      DB_PORT: 5432
      DB_NAME: store_db
      DB_USERNAME: ${DB_USERNAME:-eatcloud_user}
      DB_PASSWORD: ${DB_PASSWORD:-devpassword123}
      REDIS_HOST: redis
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      eatcloud-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

  order-service:
    <<: *service-config
    build:
      context: ../../
      dockerfile: order-service/Dockerfile
    container_name: order-service
    ports:
      - "8086:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DB_HOST: eatcloud-db
      DB_PORT: 5432
      DB_NAME: order_db
      DB_USERNAME: ${DB_USERNAME:-eatcloud_user}
      DB_PASSWORD: ${DB_PASSWORD:-devpassword123}
      REDIS_HOST: redis
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      eatcloud-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_started

  payment-service:
    <<: *service-config
    build:
      context: ../../
      dockerfile: payment-service/Dockerfile
    container_name: payment-service
    ports:
      - "8087:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DB_HOST: eatcloud-db
      DB_PORT: 5432
      DB_NAME: payment_db
      DB_USERNAME: ${DB_USERNAME:-eatcloud_user}
      DB_PASSWORD: ${DB_PASSWORD:-devpassword123}
      REDIS_HOST: redis
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      eatcloud-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_started

networks:
  eatcloud-network:
    driver: bridge

volumes:
  redis-data:
  eatcloud_db_data:
