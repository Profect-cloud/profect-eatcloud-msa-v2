spring.application.name=payment-service
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=false
spring.sql.init.mode=never

spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.timeout=2000ms
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}
spring.kafka.consumer.group-id=payment-service
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.use.type.headers=false
spring.kafka.consumer.properties.spring.json.value.default.type=com.eatcloud.paymentservice.event.OrderCreatedEvent

payment.mock.enabled=${PAYMENT_MOCK_ENABLED:true}

toss.api.base-url=https://api.tosspayments.com
toss.client-key=${TOSS_CLIENT_KEY:test_ck_PBal2vxj81zE0aPZaJJw35RQgOAN}
toss.secret-key=${TOSS_SECRET_KEY:test_sk_EP59LybZ8BvPnakezLBG86GYo7pR}
toss.success.url=${TOSS_SUCCESS_URL}
toss.fail.url=${TOSS_FAIL_URL}


logging.level.com.eatcloud.paymentservice=DEBUG

spring.session.store-type=redis


management.endpoints.web.exposure.include=health,info,prometheus,metrics
management.endpoint.health.show-details=when-authorized
management.endpoints.web.base-path=/actuator
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true
management.metrics.tags.application=${spring.application.name}
management.metrics.tags.service=${spring.application.name}
management.metrics.tags.environment=production

management.metrics.enable.hikaricp=true
management.metrics.enable.tomcat=true
management.metrics.enable.jvm=true
management.metrics.enable.system=true
management.metrics.enable.logback=true
management.metrics.enable.process=true

management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.sla.http.server.requests=50ms,100ms,200ms,300ms,500ms,1s

server.tomcat.mbeans-registry.enabled=true

logging.level.com.netflix.discovery=OFF
logging.level.org.springframework.cloud.netflix.eureka=OFF
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR

# ?? ?? ??
logging.file.path=/var/log/app
logging.file.name=/var/log/app/${spring.application.name}-stateless.log
logging.pattern.file={"@timestamp":"%d{yyyy-MM-dd'T'HH:mm:ss.SSSZ}","level":"%level","logger_name":"%logger","message":"%message","service":"${spring.application.name}","profile":"aws","traceId":"%X{traceId:-}","orderId":"%X{orderId:-}","userId":"%X{userId:-}","userRole":"%X{userRole:-}","clientIp":"%X{clientIp:-}","sessionId":"%X{sessionId:-}","thread":"%thread","logType":"default"}%n

# ?? ?? ??
logging.level.com.eatcloud=INFO
logging.level.org.springframework.security=WARN
logging.level.org.springframework.web=WARN
logging.level.org.hibernate.SQL=WARN

# ?? ?? ?? ??
logging.logback.rollingpolicy.max-file-size=50MB
logging.logback.rollingpolicy.max-history=7
logging.logback.rollingpolicy.total-size-cap=500MB