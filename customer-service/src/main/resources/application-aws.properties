server.port=8082
spring.application.name=customer-service

eureka.client.enabled=false
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
spring.cloud.discovery.enabled=false
spring.cloud.service-registry.auto-registration.enabled=false

spring.autoconfigure.exclude=org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration,org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration


spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:db/schema.sql
spring.sql.init.continue-on-error=true
spring.jpa.defer-datasource-initialization=true

spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=6379
spring.data.redis.ssl.enabled=false
spring.data.redis.timeout=2000ms

spring.session.store-type=redis

management.endpoints.web.exposure.include=health,info,prometheus,metrics
management.endpoint.health.show-details=when-authorized
management.endpoints.web.base-path=/actuator

management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true
management.metrics.tags.application=${spring.application.name}
management.metrics.tags.service=${spring.application.name}
management.metrics.tags.environment=production

management.metrics.enable.ricp=true
management.metrics.enable.tomcat=true
management.metrics.enable.jvm=true
management.metrics.enable.system=true
management.metrics.enable.logback=true
management.metrics.enable.process=true

management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.sla.http.server.requests=50ms,100ms,200ms,300ms,500ms,1s

server.tomcat.mbeans-registry.enabled=true

# Kafka Configuration for AWS MSK
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS}
spring.kafka.consumer.group-id=customer-service
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.enable-auto-commit=false

# Kafka Memory Optimization
spring.kafka.consumer.fetch-max-bytes=1048576
spring.kafka.consumer.max-partition-fetch-bytes=524288
spring.kafka.consumer.receive-buffer-bytes=32768
spring.kafka.consumer.send-buffer-bytes=32768
spring.kafka.consumer.session-timeout-ms=30000
spring.kafka.consumer.heartbeat-interval-ms=3000

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Kafka SSL Settings
spring.kafka.security.protocol=${SPRING_KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
spring.kafka.ssl.endpoint.identification.algorithm=${SPRING_KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM:https}
spring.kafka.consumer.properties.security.protocol=${SPRING_KAFKA_CONSUMER_PROPERTIES_SECURITY_PROTOCOL:PLAINTEXT}
spring.kafka.consumer.properties.ssl.endpoint.identification.algorithm=${SPRING_KAFKA_CONSUMER_PROPERTIES_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM:https}
spring.kafka.producer.properties.security.protocol=${SPRING_KAFKA_PRODUCER_PROPERTIES_SECURITY_PROTOCOL:PLAINTEXT}
spring.kafka.producer.properties.ssl.endpoint.identification.algorithm=${SPRING_KAFKA_PRODUCER_PROPERTIES_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM:https}

logging.level.com.netflix.discovery=OFF
logging.level.org.springframework.cloud.netflix.eureka=OFF
logging.level.com.eatcloud.customerservice=INFO
logging.level.org.springframework.security=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR
